// <auto-generated>

namespace Swagger.Admin.Models
{
    using Newtonsoft.Json;
    using Swagger.Admin;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ModelStateEntry
    {
        /// <summary>
        /// Initializes a new instance of the ModelStateEntry class.
        /// </summary>
        public ModelStateEntry()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ModelStateEntry class.
        /// </summary>
        /// <param name="validationState">Possible values include:
        /// 'Unvalidated', 'Invalid', 'Valid', 'Skipped'</param>
        public ModelStateEntry(object rawValue = default(object), string attemptedValue = default(string), IList<ModelError> errors = default(IList<ModelError>), string validationState = default(string), bool? isContainerNode = default(bool?), IList<ModelStateEntry> children = default(IList<ModelStateEntry>))
        {
            RawValue = rawValue;
            AttemptedValue = attemptedValue;
            Errors = errors;
            ValidationState = validationState;
            IsContainerNode = isContainerNode;
            Children = children;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rawValue")]
        public object RawValue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "attemptedValue")]
        public string AttemptedValue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "errors")]
        public IList<ModelError> Errors { get; private set; }

        /// <summary>
        /// Gets or sets possible values include: 'Unvalidated', 'Invalid',
        /// 'Valid', 'Skipped'
        /// </summary>
        [JsonProperty(PropertyName = "validationState")]
        public string ValidationState { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isContainerNode")]
        public bool? IsContainerNode { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "children")]
        public IList<ModelStateEntry> Children { get; private set; }

    }
}
